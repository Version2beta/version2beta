// Generated by CoffeeScript 1.8.0
module.exports = function(options) {
  var RSS, collectionName, destination, extend, limit, postDescription, url;
  if (options == null) {
    options = {};
  }
  RSS = require('rss');
  extend = require('extend');
  url = require('url');
  limit = options.limit || 20;
  destination = options.destination || 'rss.xml';
  collectionName = options.collection;
  postDescription = options.postDescription || function(file) {
    return file.less || file.excerpt || file.contents;
  };
  if (!collectionName) {
    throw new Error('collection option is required');
  }
  return function(files, metalsmith, done) {
    var collection, feed, feedOptions, file, itemData, metadata, siteUrl, _i, _len, _ref;
    metadata = metalsmith.metadata();
    if (!metadata.collections) {
      return done(new Error('no collections configured - see metalsmith-collections'));
    }
    collection = metadata.collections[collectionName];
    feedOptions = extend({}, metadata.site, options, {
      site_url: (_ref = metadata.site) != null ? _ref.url : void 0,
      generator: 'metalsmith-feed'
    });
    siteUrl = feedOptions.site_url;
    if (!siteUrl) {
      return done(new Error('either site_url or metadata.site.url must be configured'));
    }
    if (feedOptions.feed_url == null) {
      feedOptions.feed_url = url.resolve(siteUrl, destination);
    }
    feed = new RSS(feedOptions);
    if (limit) {
      collection = collection.slice(0, limit);
    }
    for (_i = 0, _len = collection.length; _i < _len; _i++) {
      file = collection[_i];
      itemData = extend({}, file, {
        description: postDescription(file)
      });
      if (!itemData.url && itemData.path) {
        itemData.url = url.resolve(siteUrl, file.path);
      }
      feed.item(itemData);
    }
    files[destination] = {
      contents: new Buffer(feed.xml(), 'utf8')
    };
    return done();
  };
};
