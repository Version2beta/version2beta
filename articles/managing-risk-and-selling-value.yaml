pagetitle: Managing risk and selling value
longtitle: My presentation on quoting projects, originally delivered to Web414 on February 21, 2013.
published: 
excerpt: You're a skilled practitioner of web crafts. You can get Google agog. You can send customers clicking to conversions. You can refactor a repulsive code repository. But you don't know how much to charge. This presentation explores how the three prime factors for pricing your work - complexity, risk, and value - interact with each other and help make the right jobs lucrative for you and your client. This presentation is intended for freelance web craftspeople, bespoke design agencies, and boutique development firms.

Last month I got into a discussion with a few professional members at [BucketWorks][bucketworks]. Two of the participants are mechanical engineers who have a 3D prototyping company, and a third is a developer. The discussion focused on the correct way to price a software development project the mechanical engineers were expected to produce.

I happened into the conversation, but I'm afraid I may have taken it over a bit. See, I already have a system for pricing software development, so I simply shared it, in condensed form, over a period of ten or fifteen minutes. The mechanical engineers were very kind in their appreciation, which is always cool to have, and the software developer said I should present this at one of the tech meetups.

This hadn't occured to me before, but I was happy that Web414 accepted my proposal and invited me to give this presentation on pricing project work.

I write my presentations in advance, and then do my best to present what I wrote, so this post is something close to a transcript of my presentation. Actually, it's a transcript of how I meant to give the presentation, without the 'ums' and 'ahs', nervous pauses, misplaced words, and sections I undoubtedly missed due to various deficiencies in public speaking.

-----

![Slide: @version2beta and contact information]()

Hi, I'm version2beta. Some people call me Rob. You can call me either. Don't call me Dad though. I only let a small number of people call me Dad.

My presentation is about figuring out how much to charge for your work. This is one of those talks where you get to learn from someone who really, really knows what they're talking about. I've done it wrong virtually every way you can, so I came up with a system that, so far and without fail, has told me how much I should have charged for every project I've underquoted.

It works proactively too. In fact, that is the recommended way of using this system.

Before we get into the details, I'd like to tell you about my first ever paid programming gig.

![Slide: Economic Order Quantities]()

This formula is used to calculate the economic order quantity for inventory.

It's been around a while. I first learned it in 1983, when I was 13 years old. I don't know if it's true or not, but at the time, I was under the impression that my father was one of the creators of this formula. He was inventory control manager for Simpson Paper Company, Eastern Division. His job was to make sure they had the right raw materials on hand, in the right quantities, for all of the plants east of the Mississippi River.

He had this formula that would help him figure out how much stuff to buy. He also had the only IBM PC at Simpson's Vicksburg, Michigan offices.

And he had a very nerdy kid. I didn't know it then, but over the next four years, I was going to write the student council's computer dating program and run the annual computer dating fundraiser all four years.

The formula isn't too bad. Basically, you take the annual demand for an inventory item, multiply that by twice the cost per piece, divide that by the holding cost for one item for a year, and then take the square root. The resulting number is the ideal quantity to minimize your total ordering and holding costs for the year.

I know this isn't actually very interesting. But this formula has a square root symbol in it, so it's going to make the formulas I show you in a little while look easy. So it's important you pay attention.

The short story is that my father had me code this formula. He paid me $30 and took it to the office and that was the last I heard about it for a year.

Let's fast forward to the Superbowl, about a year later. I had a pretty serious crush on Diane DeYoung, and every year she and her sister and parents came to our house for my parents' annual Superbowl party. My crush on Diane doesn't actually have anything to do with the story, though.

The reason the DeYoungs came to our house was because Diane's father David worked with my father at Simpson paper. During this particular Superbowl party, Mr. DeYoung pulled me aside and congratulated me on the program I wrote for my father.

He said, "That program saved us $3 million dollars last year."

Even as a freshman in high school, I could do math pretty quick in my head. The $3 million dollars was a very significant return on investment for the $30 I was paid.

It seemed possible I had underquoted that job.

-----

![Slide: The CRV Model]()

I have a formula for helping people figure out how much to charge for their work. It's called the CRV Model. C-R-V stands for Complexity, Risk, and Value.

I designed this model when my wife and I owned and ran a web development company together. I found it useful for pricing development work, but really there's nothing about it that limits its utility to programming projects.

It should be useful for modelling any kind of project work. What matters to this formula is that the project is relatively specified in advance, and you're trying to put a fixed price on it.

![Slide: Some caveats]()

I have some caveats for you:

1. You're going to need some business instinct to use this model.
1. In fact, the more business acumen you have, the better this model will work for you.
1. If you have a good sense of business, you probably don't need this model.
1. If you don't have a good business sense, this model will help you develop one.
1. This is not a silver bullet. It's a model. It helps you understand the world a little better.
1. At the end of the day you still need to take credit for your own success. No need to call me up and say thank you.
1. Same goes for your failures, by the way.

![Slide: Ignore everything I'm about to tell you and go do Agile development instead.]()

It's also important to note that there are better systems. For example:

If you trust your client, and your client trusts you, I strongly recommend you ditch fixed price quoting and pursue Agile development and project management. I promise you, properly done, it works better. All you need is a lot of trust, excellent communication skills between you and your client, and the knowledge and experience to do Agile properly.

-----

![Slide: The problem]()

_slide_

1. If you're here, you're probably not working for the man. Or you want to stop working for the man.
2. Even if you're self employed, you still don't want to sell your life by the hour.
3. Even if you're willing to sell your life by the hour, your client wants a fixed price for the project.
4. Even when you give a fixed price, there's still the out of scope work.
5. Even when your contract covers out of scope pricing, it can be hard to get paid for it.
6. Even if they pay for it, cost overruns can stress your relationship with your client.

Let's talk about why we're here. What is the problem I was trying to solve. I see it as three-fold.

First. It's very important that you hire the right clients. And in case you get a bad client, it's important to know when to fire them.

Second. Even good clients sometimes suck. They want a fixed price bid. Then they want to go out of scope. Then they want to blame you that they went out of scope, that you should have thought of that. Then they don't want to pay for going out of scope. Then if they do pay you for going out of scope, maybe they resent it.

Third. It's come to my attention that I have a limited number of hours in my life. I know that sometimes it feels infinite, but I've consulted with some pretty good doctors, and they assure me I have an expiration date. It's true.

This may also be true for you. You should consult with your doctor. If by any chance your doctor confirms this, then you, like me, are in a position to decide at what hourly rate we're willing to sell our limited lives.  Or if we want to sell our lives by the hour at all.

![Slide: List of goals.]()

So these are our three goals.

* Pursue the right work, and avoid the wrong work.
* Charge according to value, not time.
* Compensate for what you don't know, and for what may go wrong.

-----

![Slide: The formula : Pq = o * log10((C + R + V) / A) * d + m]()

So here it is. Scary. It even has a logarithm thingamajig in it.

Let's walk through it, one parameter at a time.

![Slide: The formula, highlighting 'Pq =']()

On the left side, we have the quoted price. This will be the product of our calculation, and the price the model suggests for your project.

![Slide: The formula, highlighting '(C + R + V)']()

C, R, and V stand for Complexity, Risk, and Value. We are going to look at these terms in detail.

![Slide: The formula, hightlighting 'A']()

A stands for Appetite. It represents how hungry you are to land the contract.

![Slide: The formula, highlighting 'o', 'd', and 'm']()

I'm going to call these three little factors your constants. Overhead, days, and materials.

The little 'o' is your overhead. This is just enough to cover you basic costs. This will vary a lot based on how big your business is, whether you subcontract, etc. We'll discuss this in more detail.

The little 'd' is your time estimate in days. It doesn't need to be exact. We'll cover this more too.

The little 'm' are your material and other project costs. If you are going to have project-based expenses other than time, put it in here. If you mark up your direct costs, put the marked up amount in here.

![Slide: The formula, nothing highlighted]()

So that's the formula.

Add some numbers together. Those are our factors for Complexity, Risk, and Value.

Divide by another number. That factors in how hungry we are to get the order.

Multiple by a couple other numbers. That gets us our overhead for the job and how many days of overhead we need to cover.

Add in the remainder. That's any direct or material costs.

You've got your price. Let's look at the specifics.

-----

![Slide: Overhead]()

While Complexity, Risk, and Value are the real focus of this formula, let's get our constants out of the way first. Let's start with overhead.

Just in case you're wondering, our formula is managerial accounting, not traditional balance-sheet type accounting. For example in cost accounting, our labor is divided into time-based units of measure and we put a cost on each full unit and use that for our basis. That's the system we're getting away from.

Managerial or analytical accounting uses a variety of accounting-type metrics to answer specific questions, usually questions about the future. That's what we're doing. We're using a handful of metrics to ask questions about the future cost of doing a project.

One of the questions we need to answer is, "How much of my overhead costs do I need to assign to this project?" This is the little 'o' in our formula. Overhead.

Moonlighters, raise your hand. Now keep your hand up if "overhead costs" and "beer money" are roughly the same for you. I've been there. I still do some work that way. I would like to remind you that there are a lot of people trying to feed families doing the same work. Be careful about setting this value too low.

Freelancers, raise your hand. Moonlighters can join back in now. I'd like to suggest that your overhead is the least you're willing to work for, assuming that you're doing this as much as you want to.

* This might be the hourly wage you'd take if you worked a regular job.

* It might be the amount you want to take as a draw plus taxes and self employment taxes plus business expenses.

* You probably ought to include your benefits too. Just because you're self-employed doesn't mean you shouldn't take vacations, or have health insurance.

Freelancers and moonlighters, I encourage you to think about this overhead cost in terms of "days", even though it could be months or weeks or hours instead. The important things are that we need the same unit of measures when we're guessing how much time we're going to put into the project.

I suggest you avoid thinking about it in terms of hours, though. This can lead you right back into cost accounting, and we want to avoid that so we can see a bigger picture.

![Slide: Overhead example, freelancers]()

_slide_

* Every month I need $2,500 to cover my living expenses.
* My income and self employment taxes on that are about $600.
* I need health insurance that costs me $520 per month.
* I want to spend $250 a month improving my skills.
* I spend about $400 a month on sales and marketing.
* Ideally, I hope to be doing project work three full days a week, or about 13 days a month.

Overhead per work day = (2,500 + 600 + 520 + 250 + 400) / 13

Overhead per work day = $328

_slide_

Let's walk through an example calculating overhead for a single person freelancing. No employees. No employer. We have to answer some questions for ourself.

First, what do I need to draw from my business to cover my living expenses.

Second, what do I need to put aside to cover taxes. The tax man cometh.

Third, what expenses will I have for my business.

Fourth, how much do I reasonably expect to work.

In the example above, I arrive at a "per project day" overhead cost of $328 for this hypothetical freelancer working something that looks very much like full time on a very modest income of only $30,000 a year take home.

Remember that number, $328 per project day. We'll use that in examples later on.


![Slide: Overhead example, agencies]()

_slide_

* Operating Expenses (including payroll): $72,000 / month
* Employees engaged in production: 6
* Productive days per month: 20

Overhead per day per employee = 72,000 / (6 * 20)

Overhead per project day = $600

_slide_

Here's another example, this one for a small-ish agency.

For agencies, I think the numbers are pretty simple to follow. Add up all your expenses. This includes payroll, even for billable resources. Divide it across the number of people doing billable work.

Again, we're not doing cost accounting. If you're interested, this formula is inspired a bit by Throughput Accounting, but the important thing to remember is that we don't want to slip into the habit of thinking in terms of hours of labor.


![Slide: Time commitment, 'd']()

_slide_

Person-days you expect to commit to the project.

_slide_

We are not going to try to figure out how many hours a job takes. However, we are going to schedule resources - that is, production employees, developers, designers, copywriters - to the project. Little 'd' gives us the number of person-days we expect to commit to this project.


![Slide: Project costs, 'm']()

_slide_

Examples of materials and direct project costs:

* Travel expenses - hotels, meals, mileage, etc. 
* Hosting a development environment for the specific project
* Hiring a project manager
* Contracting specialized work
* Buying project-specific training materials
* Software licensing
* Etc.

_slide_

Little 'm' is easy. It's any direct costs associated with the project, that apply just to this project.

If you need to hire a specialist, put her costs in here.

Actually, I've done this a bunch of times. On one project, I was programming the controls for an automated heat treating line. This particular system used huge vats of molten salt for heat treating the parts. The system was basically robot arm on a 120 foot long track that picks up baskets of parts, each basket weighing about 300 pounds, and moves them through the heat treating process. Each basket got its own recipe, based on the kinds of parts inside. So a given basket might go in the hottest vat for 30 seconds, then quench for 30 seconds, then do something else.

Believe it or not, that was the easy part.

The hard part of this project was adding the ability for the heat treating company to tell the computer what parts were coming up, so that the computer could decide when each basket should be loaded in order to maximize throughput. For that I hired an outside consultant, a guy named Kim Duk-Won.

Kim is great. Before I went to visit Korea, he taught me to read and speak enough Hangeul so that I could get around town, order food, and find a bathroom. When he did his Masters thesis, I helped him with the programming. When I hired him for this project, he had completed his Ph.D. in Operations Research, done a few years optimizing delivery schedules for FedEx, and was teaching at the University of Tennessee at Oak Ridge.

Kim's time on that project was a direct project cost.


![Slide: How the scales work]()

We're going to estimate Complexity, Risk, and Value with some pretty fuzzy numbers.

I mean, this isn't an exact science. We really only know how complex something is, if it's not complex at all. We can more accurately predict risk when there's very little. And as well all know, value ranges from little, to a lot, to priceless, which is basically like saying infinity, right?

So when I make scales for Complexity, Risk, and Value, I want to have a lot of room to move around, and I want the scales to be more accurate on the lower end than on the upper end. I can't really use "infinity" as a value, but it'd be nice to be able to say "A whole lot."

So the scale we're using goes like this. It should be a number between 1 and a thousand. Or a million. Whatever you want.

If the complexity or risk or value is truly infintessimal, go ahead and use one. I usually think of 10 as my minimum though. One is just too small.

Once any of the factors start really ramping up, use big numbers. I usually top out around a thousand, but you can go higher. That's what the "log10" in the formula does for us. If you really have a project that is that risky, or that complex, or the valuable that you feel like you need really big numbers to describe it, feel free.

In our examples, we're gonna stick to numbers between 1 and ten thousand. For now anyway.


![Slide: Complexity scale]()

_slide_

10 - Anyone could do it.
100 - There are only a few people in the area who can do it.
1000 - There are only a few people in the country who could do it.
10000 - It probably can't be done.

_slide_

I think of complexity in terms of who can do the work.

Actually, I tend to think of complexity in terms of how far you'd have to go to find someone else who can do the job. In that way, it's kind of like "competition".

My friend Kim Duk-Won is an example, right? I needed a highly-specialized algorithm that he was uniquely suited to provide. Given that the competition for that position is very limited, he can charge more for his time. It's simple supply and demand.

Here's a better example. I first heard this example from my grandfather, who was an engineer.

There's this guy Gus who retires from his position as lead maintenance person at the local factory. He's put in his time, he's ready to be done working and focus on his fishing.

One day shortly after Gus retires, an absolutely critical machine fails. It's making a horrible noise. Nobody in maintenance knows what to do with it, so they tell the plant manager he's gotta get Gus to come back and fix it.

Gus isn't very happy about this, but he agrees to come look. He walks around the machine. He listens to it. And then he pulls a piece of chalk from his pocket and puts an 'X' on one part. 'Replace that,' he says.

The plant manager is thrilled until the Comptroller sees Gus' invoice for $50,000. The comptroller tells the plant manager to get an itemized invoice. The plant manager tells Gus to submit an itemized invoice.

The new invoice came with with two line items. The first line item was "One chalk mark: $1." The second line item was "Knowing where to put it: $49,999."

When you're quoting a project, always try to drive complexity down in the planning stage. It's great when your special skills are hard to find, but you'll want to be sure they're also the right skills for the job.


![Slide: Risk scale]()

_slide_

10 - It's a cake walk.
100 - There are some problems with taking the job.
1000 - There are significant risks associated with this project.
10000 - That's just crazy talk.

_slide_

I remember the first time it occured to me that I could change the price of a job based on who little or how much I know about the project. This happened way later than it should have. I had my hourly rate, and it was my hourly rate. Maybe I'd add in a few extra hours to compensate for some unknown. I could have saved a lot of money and salvaged at least one failed project if I'd only realized sooner that I should always charge more for projects that have more red flags.

Let's talk about risk.

First, I want to say risk isn't for everybody. At the low end of the scale, we have the cake walk. The job is well defined. The customer knows what they're doing when it comes to executing a project like this. They pay quickly and fairly. Maybe they're even an agency that specializes in contract talent.

This is good, steady, low-risk work. It's nice to have this kind of work. Many of us would do well to focus on this kind of work.

Or maybe you can tolerate a little more risk, so we slide up the scale a little bit.

"There are some problems with taking the job." Here we start to see some red flags, and we need to take them into consideration.

The specification is weak. The client seems uncertain of what they want. They don't respond well to suggestions. Their ideas seem overly fluid. That's a nice way of saying they are a high risk for scope creep.

The project has weak prospects. The project doesn't have a good cost-benefit ratio. It's unlikely to bring value to the client.

The customer seems overly cost-conscious. They may not have the funds required to manage the project well on their side.

The client talks about the previous contractors they've had to fire.

Sometimes the risk isn't with the client. Let's say you're not well established yet. Maybe you don't have the skills you'd need to feel confident completing the job. Or taking on this project precludes your ability to take on other work or care for your regular clients. These are all risks too.

"There are significant risks associated with the project." Now we're getting into some serious red-flaggage.

Maybe the project has no specification, and the client doesn't want to do a discovery phase.

Maybe the client's expectation for delivery, price, and / or quality are unreasonable.

Maybe the client seems to be hitting on you.

Maybe you have little confidence in the client's ability to fulfill their part of the contract. You know, like paying you.

Maybe you don't have confidence in your ability to finish the project. It may be too big, too hard, to many moving parts.

"That's just crazy talk." Projects at this level of risk are the ones we walk away from. These are the projects with abusive clients, or projects we have no expectation will ever finish successfully.

But sometimes the client is throwing money at you in spite of the difficulties, and maybe you are pretty tolerant of risk. You might even specialize in difficult clients with deep pockets. There's money in that.

When you're quoting a project, always first try to drive risk down. Build in a discovery phase and price out the full project after there's an adequate scope. Spend extra time establishing reasonable expectations with the customer, in both directions. Discuss your concerns about their ability to manage the project, and how they may benefit from bringing on a professional project manager just for the project. Schedule invoicing more frequently, and require payments be current before each phase begins.

The risk you're left with drives up your price, and this is entirely reasonable. It does a couple of very valuable things for you. For one, you might not get the job, and depending on how much risk there is, this may be a Very Good Thing.

If the job has significant, unmitigated risks, give it a "walking away" price. Don't put a lot of effort into quoting the job. Bump up the risk to an appropriate level based on the problems with the job and your less-well-considered quotation, and send it over without expectation.

Then, if you do get the job and things start to head south, you were already being paid extra to deal with it and you can take it on with a smile. Scope creep? No problem - you expected it. Plus you can still try to get paid for it. Stiffed you for the last payment? That's okay, the last payment was the second half of your bonus, not your paycheck. The client is a pain in your butt? You charged the asshole tax up front.


![Slide: Value scale]()

_slide_

Evaluating value

10 - The impact of the project will be at least as great as the cost.
100 - The impact of the project will be an order of magnitude greater than the cost.
1000 - The impact of the project will be two orders of magnitude greater than the cost.
10000 - An Arab Prince has already written you a blank check.

_slide_

My microeconomics professor at the University of Maine was a fish economist. He told us how he'd been approached by Heinz Corporation way back in 1969 to assess the potential market for cocktail sauce. They asked him for a daily rate, and he gave them a price of $100 a day.

He didn't get the contract. They found someone who'd charge them $1,000 a day.

I've worked on big websites for small companies that cost $20,000. I've worked on small websites for big companies that cost $20,000. When it comes down to it, people want to pay a price commensurate to the value they get.

I told you up front you need some business instinct to use this model. That's perhaps most true when it comes to figuring out the value your client will gain from your work. Understanding that number will do much to free you from hourly drudgery.

Don't do work that has limited value.

If the potential gain is small, your client needs to think small, and treat you small. It makes your job much less enjoyable.

If the potential gain is large, your client is motivated to make big things happen with you, and will support you on the project. It makes your job much more enjoyable, and lucrative too.


![Slide: Always. Maximize. Value.]()

It boils down to this: Always. Maximize. Value.


![Slide: Hunger.]()

_slide_

10 - You can walk away without giving it another thought.
100 - You're getting very nervous.
1000 - Your children are getting very hungry.
10000 - Just let's not go there, okay?

_slide_

We have one more factor to add in to our formula, and it's there to help you undo the benefits of using a pricing model like this at all.

Sometimes it doesn't matter what you know you should charge, you really need to get the work. Or at least some work. I propose it's still best to know what you should have been charging, and then discount it, rather than ignoring good sense and pricing the work artificially low.

"Appetite" is that factor. The hungrier you are to get the job, the higher you make your appetite factor.

Here's a warning about how this works. If your appetite is set two, your price is halved. At three, your price is cut by two thirds.

Obviously the best bet is to keep hunger at bay. But since that's often not possible, I'd like to suggest this: If you're hungry, look for snacks not huge meals.


![Slide: Practice]()

Before we get into this part, I need everyone to raise their right hand. Good. Lower it. Now raise your left hand. Lower it. Raise them both. Lower them. Are you warmed up? You're about to become involved in quoting a project.

Now that we know how all the factors work, let's try out some prices.

I'm a potential client and I have got a project. It's an e-commerce site. I want it to tie into my ERP system. My ERP system is open source, and it is written in Python.

Go.

We don't have time to go through a complete scope, so I'm just going to put in a number of 60 person-days for production. Also, I'm going to say it's a given that we won't have any direct project costs, so 'm' is zero.

Who wants to set our overhead rate? I'd like a number that you feel is close for your situation, either freelance or agency.

Good. Now we're to Complexity. Where might we set the complexity for this kind of a project?

Excellent. Now Risk. What are some of the risks that might be associated with this project?

Next is Value. Where might we put the value on a project like this?

Okay, finally we have to look at how hungry we are. Who'd like to say how badly we need this work?

So based on those factors, an overhead rate of $X a day, 60 person-days of production, Complexity set to 'A', Risk set to 'B', and Value set to 'C', and with our hunger at 'Z', the model suggests a price of $XX,XXX.

CRV fortune cookies
Low complexity, low risk
Three times your minimum is a good working wage. You can afford to hold out for the jobs you want. You enjoy your customers and your work.
High complexity, high value
You're a specialist and your customers are lucky to get your attention.
High risk, low complexity
There are many assholes in the world, and they really need someone like you. This kind of customer also offers lots of chances to play super hero, which can be very satisfying.
High risk, low value
Danger, Will Robinson! Even if everything goes well, the customer may still have reason to be dissatisified since the job probably won't pay out.
High complexity, high risk, high value
Have you been working in finance long?

OMG that's too expensive
Have reason to be confident
Show your work
Collaborate with the client
Explore the complexity
Mitigate risk
Frame value to performance bonuses

Thinking about business
The more you know about your customer
The more you know about your field
The more you know about your market
The more you know about business management
CRV as a framework for thinking about all of that
